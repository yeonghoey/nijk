#!/usr/bin/env python
import ast
from itertools import chain
from pathlib import Path
import re
import sys


def main(source):
    lines = []
    for pyfilename in source.glob('**/*.py'):
        stem = pyfilename.stem
        if stem.startswith('test_') or stem.endswith('_test'):
            print(f"`{pyfilename}' skipped", file=sys.stderr)
            continue
        for context in process(pyfilename):
            if len(context) <= 1:
                continue
            print(' '.join(context))


def process(pyfilename):
    with open(pyfilename) as f:
        try:
            source = f.read()
        except UnicodeDecodeError:
            return

    try:
        root = ast.parse(source, pyfilename)
    except SyntaxError:
        return

    for a in ast.walk(root):
        if isinstance(a, ast.ClassDef):
            if 'Test' in a.name:
                continue
            yield [a.name] + [f.name for f in a.body
                              if isinstance(f, ast.FunctionDef)
                              if not stopfuncs(f.name)]

        if isinstance(a, ast.FunctionDef):
            if stopfuncs(a.name):
                continue
            yield [a.name] + [x.arg for x in a.args.args
                              if not stopargs(x.arg)]


def stopfuncs(s):
    return s.startswith('test_') or is_dunder(s)


def is_dunder(s):
    return s.startswith('__') and s.endswith('__')


def stopargs(s):
    return s in ('self', 'cls')


if __name__ == '__main__':
    source = Path(sys.argv[1])
    main(source)
